package com.client.utils.auth;

public class SlowAES {
    private static final int[] RCON = {
            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab,
            0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
            0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
            0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
            0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02,
            0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
            0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33,
            0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
    };
    private static final int[] SBOX = {
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    };
    private static final int[] RSBOX = {
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    };

    public static void decrypt(byte[] cipherin, byte[] key, byte[] iv, byte[] bytesOut) {
        byte[] output = new byte[16];
        decrypt(cipherin, key, output);
        for (int i = 0; i < 16; i++) {
            bytesOut[i] = (byte) (iv[i] ^ output[i]);
        }
    }

    public static void decrypt(byte[] input, byte[] key, byte[] output) {
        int size = 16;

        byte[] block = new byte[16];
        for (int i = 0; i < 16; i++) {
            output[i] = 0;
            block[i] = 0;
        }
        int nbrRounds = numberOfRounds(size);
        for (int i = 0; i < 4; i++)        /* iterate over the columns */
            for (int j = 0; j < 4; j++) /* iterate over the rows */
                block[(i + (j * 4))] = input[(i * 4) + j];
        /* expand the key into an 176, 208, 240 bytes key */
        byte[] expandedKey = new byte[16 * (numberOfRounds(size) + 1)];
        expandKey(key, size, expandedKey);
        /* decrypt the block using the expandedKey */
        invMain(block, expandedKey, nbrRounds);
        for (int k = 0; k < 4; k++)        /* unmap the block again into the output */
            for (int l = 0; l < 4; l++) /* iterate over the rows */
                output[(k * 4) + l] = block[(k + (l * 4))];
    }

    private static void invMain(byte[] state, byte[] expandedKey, int nbrRounds) {
        byte[] roundKey = new byte[16];
        createRoundKey(expandedKey, 16 * nbrRounds, roundKey);
        addRoundKey(state, roundKey);

        for (int i = nbrRounds - 1; i > 0; i--) {
            createRoundKey(expandedKey, 16 * i, roundKey);
            invRound(state, roundKey);
        }
        shiftRows(state, true);
        subBytes(state, true);
        createRoundKey(expandedKey, 0, roundKey);
        addRoundKey(state, roundKey);
    }

    private static void invRound(byte[] state, byte[] roundKey) {
        shiftRows(state, true);
        subBytes(state, true);
        addRoundKey(state, roundKey);
        mixColumns(state, true);
    }

    private static void mixColumns(byte[] state, boolean isInv) {
        byte[] column = new byte[4];
        /* iterate over the 4 columns */
        for (int i = 0; i < 4; i++) {
            /* construct one column by iterating over the 4 rows */
            for (int j = 0; j < 4; j++)
                column[j] = state[(j * 4) + i];
            /* apply the mixColumn on one column */
            mixColumn(column, isInv);
            /* put the values back into the state */
            for (int k = 0; k < 4; k++)
                state[(k * 4) + i] = column[k];
        }
    }

    private static void mixColumn(byte[] column, boolean isInv) {
        int[] mult = new int[4];
        int[] a = {14, 9, 13, 11};
        int[] b = {2, 1, 1, 3};
        if (isInv)
            mult = a;
        else
            mult = b;
        byte[] cpy = new byte[4];
        System.arraycopy(column, 0, cpy, 0, 4);

        column[0] = (byte) (galoisMultiplication(cpy[0], mult[0]) ^
                galoisMultiplication(cpy[3], mult[1]) ^
                galoisMultiplication(cpy[2], mult[2]) ^
                galoisMultiplication(cpy[1], mult[3]));
        column[1] = (byte) (galoisMultiplication(cpy[1], mult[0]) ^
                galoisMultiplication(cpy[0], mult[1]) ^
                galoisMultiplication(cpy[3], mult[2]) ^
                galoisMultiplication(cpy[2], mult[3]));
        column[2] = (byte) (galoisMultiplication(cpy[2], mult[0]) ^
                galoisMultiplication(cpy[1], mult[1]) ^
                galoisMultiplication(cpy[0], mult[2]) ^
                galoisMultiplication(cpy[3], mult[3]));
        column[3] = (byte) (galoisMultiplication(cpy[3], mult[0]) ^
                galoisMultiplication(cpy[2], mult[1]) ^
                galoisMultiplication(cpy[1], mult[2]) ^
                galoisMultiplication(cpy[0], mult[3]));
    }

    private static int galoisMultiplication(int a, int b) {
        int p = 0;
        for (int counter = 0; counter < 8; counter++) {
            if ((b & 1) == 1)
                p ^= a;
            if (p > 0x100)
                p ^= 0x100;
            boolean hiBitSet = (a & 0x80) != 0; // keep p 8 bit
            a <<= 1;
            if (a > 0x100)
                a ^= 0x100; // keep a 8 bit
            if (hiBitSet)
                a ^= 0x1b;
            if (a > 0x100)
                a ^= 0x100; // keep a 8 bit
            b >>= 1;
            if (b > 0x100)
                b ^= 0x100; // keep b 8 bit
        }
        return p;
    }

    private static void subBytes(byte[] state, boolean isInv) {
        for (int i = 0; i < 16; i++)
            state[i] = (byte) (isInv ? RSBOX[state[i] & 0xFF] : SBOX[state[i] & 0xFF]);
    }

    private static void shiftRows(byte[] state, boolean isInv) {
        for (int i = 0; i < 4; i++)
            shiftRow(state, i * 4, i, isInv);
    }

    private static void shiftRow(byte[] state, int statePointer, int nbr, boolean isInv) {
        for (int i = 0; i < nbr; i++) {
            if (isInv) {
                byte tmp = state[statePointer + 3];
                for (int j = 3; j > 0; j--)
                    state[statePointer + j] = state[statePointer + j - 1];
                state[statePointer] = tmp;
            } else {
                byte tmp = state[statePointer];
                for (int j = 0; j < 3; j++)
                    state[statePointer + j] = state[statePointer + j + 1];
                state[statePointer + 3] = tmp;
            }
        }
    }

    private static void createRoundKey(byte[] expandedKey, int roundKeyPointer, byte[] roundKey) {
        for (int i = 0; i < 16; i++)
            roundKey[i] = 0;
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                roundKey[j * 4 + i] = expandedKey[roundKeyPointer + i * 4 + j];
    }

    private static void addRoundKey(byte[] state, byte[] roundKey) {
        for (int i = 0; i < 16; i++)
            state[i] ^= roundKey[i];
    }

    private static int numberOfRounds(int size) {
        int nbrRounds = 0;
        switch (size) {
            case 16:
                nbrRounds = 10;
                break;
            case 24:
                nbrRounds = 12;
                break;
            case 32:
                nbrRounds = 14;
                break;
        }
        return nbrRounds;
    }

    private static void expandKey(byte[] key, int size, byte[] expandedKey) {
        int expandedKeySize = (16 * (numberOfRounds(size) + 1));
        int currentSize = 0;
        int rconIteration = 1;
        byte[] t = {0, 0, 0, 0};
        for (int i = 0; i < expandedKeySize; i++)
            expandedKey[i] = 0;
        /* set the 16,24,32 bytes of the expanded key to the input key */
        for (int j = 0; j < size; j++)
            expandedKey[j] = key[j];
        currentSize += size;
        while (currentSize < expandedKeySize) {
            /* assign the previous 4 bytes to the temporary value t */
            for (int k = 0; k < 4; k++)
                t[k] = expandedKey[(currentSize - 4) + k];

            /* every 16,24,32 bytes we apply the core schedule to t
             * and increment rconIteration afterwards
             */
            if (currentSize % size == 0)
                core(t, rconIteration++);

            /* For 256-bit keys, we add an extra sbox to the calculation */
            if (size == 32 && ((currentSize % size) == 16))
                for (int l = 0; l < 4; l++)
                    t[l] = (byte) SBOX[t[l] & 0xFF];

            /* We XOR t with the four-byte block 16,24,32 bytes before the new expanded key.
             * This becomes the next four bytes in the expanded key.
             */
            for (int m = 0; m < 4; m++) {
                expandedKey[currentSize] = (byte) (expandedKey[currentSize - size] ^ t[m]);
                currentSize++;
            }
        }
    }

    private static void rotate(byte[] word) {
        byte c = word[0];
        for (int i = 0; i < 3; i++)
            word[i] = word[i + 1];
        word[3] = c;
    }

    private static void core(byte[] word, int iteration) {
        rotate(word);
        for (int i = 0; i < 4; ++i)
            word[i] = (byte) SBOX[word[i] & 0xFF];
        /* XOR the output of the rcon operation with i to the first part (leftmost) only */
        word[0] = (byte) (word[0] ^ RCON[iteration]);
    }

    public static void toNumbers(String hexStr, byte[] arrayPtr) {
        for (int i = 0; i < 16; i++) {
            int ch1 = hexStr.charAt(i * 2);
            if (ch1 < 58)
                ch1 = ch1 - 48;
            else
                ch1 = ch1 - 87;
            int ch2 = hexStr.charAt(i * 2 + 1);
            if (ch2 < 58)
                ch2 = ch2 - 48;
            else
                ch2 = ch2 - 87;
            arrayPtr[i] = (byte) (ch1 * 16 + ch2 * 1);
        }
    }

    public static void toHex(byte[] arrayPtr, byte[] result) {
        for (int i = 0; i < 16; i++) {
            int ch2 = arrayPtr[i] & 0x0F; // Get the lower 4 bits
            int ch1 = (arrayPtr[i] & 0xF0) >>> 4; // Get the upper 4 bits

            if (ch2 < 10)
                result[i * 2 + 1] = (byte) (ch2 + '0');
            else
                result[i * 2 + 1] = (byte) (ch2 - 10 + 'a');

            if (ch1 < 10)
                result[i * 2] = (byte) (ch1 + '0');
            else
                result[i * 2] = (byte) (ch1 - 10 + 'a');
        }
        result[32] = 0; // Null terminator
    }
}